// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configuration;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20220109010738_initcreate")]
    partial class initcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Entity.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CHAT_ID");

                    b.Property<DateTime>("LastEntry")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LAST_ENTRY");

                    b.HasKey("Id");

                    b.ToTable("CHATS_BT");
                });

            modelBuilder.Entity("Model.Entity.ChatUser", b =>
                {
                    b.Property<long>("CHAT_ID")
                        .HasColumnType("bigint");

                    b.Property<long>("USER_ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("MESSAGE_ID")
                        .HasColumnType("bigint");

                    b.HasKey("CHAT_ID", "USER_ID");

                    b.HasIndex("MESSAGE_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("CHAT_HAS_USERS_JT");
                });

            modelBuilder.Entity("Model.Entity.Friend", b =>
                {
                    b.Property<long>("USER_ID")
                        .HasColumnType("bigint");

                    b.Property<long>("FRIEND_ID")
                        .HasColumnType("bigint");

                    b.HasKey("USER_ID", "FRIEND_ID");

                    b.HasIndex("FRIEND_ID");

                    b.ToTable("FRIENDS_JT");
                });

            modelBuilder.Entity("Model.Entity.FriendRequest", b =>
                {
                    b.Property<long>("SENDER_ID")
                        .HasColumnType("bigint");

                    b.Property<long>("RECEIVER_ID")
                        .HasColumnType("bigint");

                    b.HasKey("SENDER_ID", "RECEIVER_ID");

                    b.HasIndex("RECEIVER_ID");

                    b.ToTable("FRIEND_REQUESTS_JT");
                });

            modelBuilder.Entity("Model.Entity.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MESSAGE_ID");

                    b.Property<long?>("CHAT_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("SEND_AT");

                    b.Property<long?>("USER_ID")
                        .HasColumnType("bigint");

                    b.HasKey("MessageId");

                    b.HasIndex("CHAT_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("MESSAGES");
                });

            modelBuilder.Entity("Model.Entity.MessageAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ATTACHMENT_ID");

                    b.Property<long>("MESSAGE_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("MESSAGE_ID");

                    b.ToTable("MESSAGE_HAS_ATTACHMENTS");
                });

            modelBuilder.Entity("Model.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID");

                    b.Property<string>("ChatMode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CHAT_MODE");

                    b.Property<ulong>("DarkMode")
                        .HasColumnType("bit")
                        .HasColumnName("DARK_MODE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("USERNAME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("Model.Entity.UserCode", b =>
                {
                    b.Property<long>("USER_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TYPE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CODE");

                    b.HasKey("USER_ID", "Type");

                    b.ToTable("USER_CODES");
                });

            modelBuilder.Entity("Model.Entity.Groupchat", b =>
                {
                    b.HasBaseType("Model.Entity.Chat");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("NAME");

                    b.ToTable("GROUPCHATS");
                });

            modelBuilder.Entity("Model.Entity.Singlechat", b =>
                {
                    b.HasBaseType("Model.Entity.Chat");

                    b.ToTable("SINGLECHATS");
                });

            modelBuilder.Entity("Model.Entity.ChatUser", b =>
                {
                    b.HasOne("Model.Entity.Chat", "Chat")
                        .WithMany("Users")
                        .HasForeignKey("CHAT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MESSAGE_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Entity.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entity.Friend", b =>
                {
                    b.HasOne("Model.Entity.User", "FriendUser")
                        .WithMany()
                        .HasForeignKey("FRIEND_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FriendUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entity.FriendRequest", b =>
                {
                    b.HasOne("Model.Entity.User", "Receiver")
                        .WithMany("FriendRequestsReceived")
                        .HasForeignKey("RECEIVER_ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.User", "Sender")
                        .WithMany("FriendRequestsSend")
                        .HasForeignKey("SENDER_ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Model.Entity.Message", b =>
                {
                    b.HasOne("Model.Entity.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("CHAT_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("USER_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entity.MessageAttachment", b =>
                {
                    b.HasOne("Model.Entity.Message", "Message")
                        .WithMany("MessageAttachments")
                        .HasForeignKey("MESSAGE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EFCAT.Model.Annotation.Document", "Attachment", b1 =>
                        {
                            b1.Property<long>("MessageAttachmentId")
                                .HasColumnType("bigint");

                            b1.Property<byte[]>("Content")
                                .IsRequired()
                                .HasColumnType("longblob")
                                .HasColumnName("ATTACHMENT_CONTENT");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("varchar(32)")
                                .HasColumnName("ATTACHMENT_TYPE");

                            b1.HasKey("MessageAttachmentId");

                            b1.ToTable("MESSAGE_HAS_ATTACHMENTS");

                            b1.WithOwner()
                                .HasForeignKey("MessageAttachmentId");
                        });

                    b.Navigation("Attachment")
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Model.Entity.User", b =>
                {
                    b.OwnsOne("EFCAT.Model.Annotation.Image", "Image", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<byte[]>("Content")
                                .IsRequired()
                                .HasColumnType("longblob")
                                .HasColumnName("IMAGE_CONTENT");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("varchar(32)")
                                .HasColumnName("IMAGE_TYPE");

                            b1.HasKey("UserId");

                            b1.ToTable("USERS");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Model.Entity.UserCode", b =>
                {
                    b.HasOne("Model.Entity.User", "User")
                        .WithMany("Codes")
                        .HasForeignKey("USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entity.Groupchat", b =>
                {
                    b.HasOne("Model.Entity.Chat", null)
                        .WithOne()
                        .HasForeignKey("Model.Entity.Groupchat", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Singlechat", b =>
                {
                    b.HasOne("Model.Entity.Chat", null)
                        .WithOne()
                        .HasForeignKey("Model.Entity.Singlechat", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Model.Entity.Message", b =>
                {
                    b.Navigation("MessageAttachments");
                });

            modelBuilder.Entity("Model.Entity.User", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Codes");

                    b.Navigation("FriendRequestsReceived");

                    b.Navigation("FriendRequestsSend");

                    b.Navigation("Friends");
                });
#pragma warning restore 612, 618
        }
    }
}
