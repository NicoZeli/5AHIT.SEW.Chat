@page "/passwordreset"
@inject Services.IMailService _mailService
@inject IUserRepository _repository
@inject NavigationManager NavManager

<PageTitle>Email Verification</PageTitle>

<DarkMode />

<AuthorizeView>
    <NotAuthorized Context="na_context">
        @if(code == null) {
            <EditForm Model="requestPasswordResetForm" OnSubmit="Request">
                <h1>Password Reset Request</h1>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <Validator @ref="requestPasswordResetValidator" />

                <InputText class="loi si" @bind-Value="requestPasswordResetForm.Identifier" placeholder="Identifier" /> <br />

                <button><span class="material-icons">play_arrow</span> Request!</button>
            </EditForm>
        } else {
            <EditForm Model="passwordResetForm" OnSubmit="Reset">
                <h1>Password Reset</h1>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <Validator @ref="passwordResetValidator" />

                <InputText class="loi si" @bind-Value="passwordResetForm.Code" placeholder="Code" /> <br />
                <InputText class="loi si" @bind-Value="passwordResetForm.Password" placeholder="Password" /> <br />

                <button><span class="material-icons">play_arrow</span> Reset!</button>
            </EditForm>
        }

        @code {
        [Parameter]
        public string? Username { get; set; }

        private User? user;
        private UserCode? code;

        private RequestPasswordResetForm requestPasswordResetForm;
        private Validator requestPasswordResetValidator;

        private PasswordResetForm passwordResetForm;
        private Validator passwordResetValidator;

        protected async override Task OnInitializedAsync() {
            requestPasswordResetForm = new RequestPasswordResetForm();
            passwordResetForm = new PasswordResetForm();
        }

        private async void Request(EditContext context) {
            try {
                user = (await _repository.FilterAsync(u => u.Username.ToUpper() == requestPasswordResetForm.Identifier.ToUpper() || u.Email.ToUpper() == requestPasswordResetForm.Identifier.ToUpper())).FirstOrDefault();
                requestPasswordResetValidator.Clear();
                if(!context.Validate()) return;
                else if(user == null) requestPasswordResetValidator.DisplayErrors(new Dictionary<string, List<string>>() { { "Account", new List<string>() { "This user does not exist." } } });
                else {
                    code = await _repository.CreatePasswordResetCode(user);
                    await _mailService.SendEmailAsync(user.Email, "Chat - PASSWORD RESET", $"{code.Code}");
                }
            } catch(Exception ex) {
                Console.WriteLine(ex.Message);
            }

        }

        private async void Reset(EditContext context) {
            try {
                passwordResetValidator.Clear();
                if(!context.Validate()) return;
                else if(code.Code != passwordResetForm.Code) passwordResetValidator.DisplayErrors(new Dictionary<string, List<string>>() { { "Account", new List<string>() { "Code is not valid." } } });
                else {
                    user.Codes.Remove(code);
                    user.Password = passwordResetForm.Password;
                    await _repository.UpdateAsync(user);
                    NavManager.NavigateTo("/", forceLoad: true);
                }
            } catch(Exception ex) {
                Console.WriteLine(ex.Message);
            }

        }
        }
    </NotAuthorized>
</AuthorizeView>